{"version":3,"file":"index.js","sources":["../src/utils.ts","../src/error-handler.ts","../src/session.ts","../src/network-monitor.ts","../src/performance-monitor.ts","../src/data-manager.ts","../src/monitor.ts","../src/index.ts"],"sourcesContent":["export function generateId(): string {\n  return 'xxxx-xxxx-4xxx-yxxx-xxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\nexport function formatStackTrace(error: Error): string {\n  if (!error.stack) return '';\n  \n  return error.stack\n    .split('\\n')\n    .map(line => line.trim())\n    .filter(line => line.length > 0)\n    .join('\\n');\n}\n\nexport function sanitizeUrl(url: string, allowUrls: string[] = [], denyUrls: string[] = []): string {\n  // Check deny list first\n  if (denyUrls.some(pattern => new RegExp(pattern).test(url))) {\n    return '[Filtered]';\n  }\n  \n  // If allow list is provided, ensure URL matches\n  if (allowUrls.length > 0 && !allowUrls.some(pattern => new RegExp(pattern).test(url))) {\n    return '[Filtered]';\n  }\n  \n  // Remove sensitive query parameters\n  try {\n    const urlObj = new URL(url);\n    const sensitiveParams = ['password', 'token', 'key', 'secret', 'auth', 'api_key'];\n    \n    sensitiveParams.forEach(param => {\n      if (urlObj.searchParams.has(param)) {\n        urlObj.searchParams.set(param, '[Filtered]');\n      }\n    });\n    \n    return urlObj.toString();\n  } catch {\n    return url;\n  }\n}\n\nexport function maskSensitiveData(data: any, maskInputs = true): any {\n  if (typeof data !== 'object' || data === null) {\n    return data;\n  }\n  \n  if (Array.isArray(data)) {\n    return data.map(item => maskSensitiveData(item, maskInputs));\n  }\n  \n  const masked: any = {};\n  const sensitiveKeys = ['password', 'token', 'key', 'secret', 'auth', 'api_key', 'credit_card', 'ssn'];\n  \n  Object.keys(data).forEach(key => {\n    const lowerKey = key.toLowerCase();\n    if (sensitiveKeys.some(sensitive => lowerKey.includes(sensitive))) {\n      masked[key] = '[Masked]';\n    } else if (typeof data[key] === 'object') {\n      masked[key] = maskSensitiveData(data[key], maskInputs);\n    } else {\n      masked[key] = data[key];\n    }\n  });\n  \n  return masked;\n}\n\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  \n  return function executedFunction(...args: Parameters<T>) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    \n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\n\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle = false;\n  \n  return function executedFunction(...args: Parameters<T>) {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n}\n\nexport function isBot(): boolean {\n  if (typeof navigator === 'undefined') return false;\n  \n  const botPatterns = [\n    /bot/i,\n    /spider/i,\n    /crawl/i,\n    /headless/i,\n    /phantom/i,\n    /selenium/i\n  ];\n  \n  return botPatterns.some(pattern => pattern.test(navigator.userAgent));\n}\n\nexport function getSessionStorage(): Storage | null {\n  try {\n    if (typeof window !== 'undefined' && window.sessionStorage) {\n      window.sessionStorage.setItem('test', 'test');\n      window.sessionStorage.removeItem('test');\n      return window.sessionStorage;\n    }\n  } catch {\n    // Storage not available\n  }\n  return null;\n}\n\nexport function getLocalStorage(): Storage | null {\n  try {\n    if (typeof window !== 'undefined' && window.localStorage) {\n      window.localStorage.setItem('test', 'test');\n      window.localStorage.removeItem('test');\n      return window.localStorage;\n    }\n  } catch {\n    // Storage not available\n  }\n  return null;\n}\n","import { formatStackTrace, generateId } from './utils';\nimport type { ErrorEvent, Breadcrumb, ReviConfig } from './types';\n\nexport class ErrorHandler {\n  private config: ReviConfig;\n  private breadcrumbs: Breadcrumb[] = [];\n  private userContext: any = {};\n\n  constructor(config: ReviConfig) {\n    this.config = config;\n    this.setupGlobalHandlers();\n  }\n\n  private setupGlobalHandlers(): void {\n    if (typeof window === 'undefined') return;\n\n    // Global error handler\n    window.addEventListener('error', (event) => {\n      this.captureError({\n        message: event.message,\n        filename: event.filename,\n        lineno: event.lineno,\n        colno: event.colno,\n        error: event.error\n      });\n    });\n\n    // Unhandled promise rejections\n    window.addEventListener('unhandledrejection', (event) => {\n      const error = event.reason;\n      let message = 'Unhandled Promise Rejection';\n      let stack = '';\n\n      if (error instanceof Error) {\n        message = error.message;\n        stack = formatStackTrace(error);\n      } else if (typeof error === 'string') {\n        message = error;\n      } else {\n        message = JSON.stringify(error);\n      }\n\n      this.captureError({\n        message,\n        stack,\n        error\n      });\n    });\n\n    // Console error interception\n    const originalConsoleError = console.error;\n    console.error = (...args: any[]) => {\n      this.addBreadcrumb({\n        timestamp: Date.now(),\n        message: args.join(' '),\n        category: 'console',\n        level: 'error'\n      });\n      originalConsoleError.apply(console, args);\n    };\n\n    // Console warn interception\n    const originalConsoleWarn = console.warn;\n    console.warn = (...args: any[]) => {\n      this.addBreadcrumb({\n        timestamp: Date.now(),\n        message: args.join(' '),\n        category: 'console',\n        level: 'warning'\n      });\n      originalConsoleWarn.apply(console, args);\n    };\n  }\n\n  captureError(errorData: {\n    message: string;\n    stack?: string;\n    filename?: string;\n    lineno?: number;\n    colno?: number;\n    error?: Error;\n    level?: 'error' | 'warning' | 'info' | 'debug';\n    tags?: Record<string, string>;\n    extra?: Record<string, any>;\n  }): string {\n    // Apply sampling\n    if (this.config.sampleRate && Math.random() > this.config.sampleRate) {\n      return '';\n    }\n\n    const errorId = generateId();\n    \n    const errorEvent: ErrorEvent = {\n      id: errorId,\n      timestamp: Date.now(),\n      message: errorData.message,\n      stack: errorData.stack || (errorData.error ? formatStackTrace(errorData.error) : undefined),\n      url: errorData.filename || window.location.href,\n      lineno: errorData.lineno,\n      colno: errorData.colno,\n      filename: errorData.filename,\n      userId: this.config.userId || this.userContext.id,\n      sessionId: '', // Will be set by Monitor class\n      userAgent: navigator.userAgent,\n      environment: this.config.environment,\n      release: this.config.release,\n      tags: errorData.tags,\n      extra: errorData.extra,\n      breadcrumbs: [...this.breadcrumbs],\n      level: errorData.level || 'error'\n    };\n\n    // Apply beforeSend filter\n    const filteredError = this.config.beforeSend?.(errorEvent) || errorEvent;\n    if (!filteredError) return '';\n\n    return errorId;\n  }\n\n  captureException(error: Error, options: {\n    level?: 'error' | 'warning' | 'info' | 'debug';\n    tags?: Record<string, string>;\n    extra?: Record<string, any>;\n  } = {}): string {\n    return this.captureError({\n      message: error.message,\n      stack: formatStackTrace(error),\n      error,\n      level: options.level,\n      tags: options.tags,\n      extra: options.extra\n    });\n  }\n\n  captureMessage(message: string, options: {\n    level?: 'error' | 'warning' | 'info' | 'debug';\n    tags?: Record<string, string>;\n    extra?: Record<string, any>;\n  } = {}): string {\n    return this.captureError({\n      message,\n      level: options.level || 'info',\n      tags: options.tags,\n      extra: options.extra\n    });\n  }\n\n  addBreadcrumb(breadcrumb: Breadcrumb): void {\n    this.breadcrumbs.push(breadcrumb);\n    \n    const maxBreadcrumbs = this.config.maxBreadcrumbs || 50;\n    if (this.breadcrumbs.length > maxBreadcrumbs) {\n      this.breadcrumbs.splice(0, this.breadcrumbs.length - maxBreadcrumbs);\n    }\n  }\n\n  setUserContext(user: any): void {\n    this.userContext = { ...this.userContext, ...user };\n  }\n\n  setTags(tags: Record<string, string>): void {\n    // Tags will be applied to future errors\n  }\n\n  setExtra(extra: Record<string, any>): void {\n    // Extra data will be applied to future errors\n  }\n\n  getBreadcrumbs(): Breadcrumb[] {\n    return [...this.breadcrumbs];\n  }\n\n  clearBreadcrumbs(): void {\n    this.breadcrumbs = [];\n  }\n}\n","import { generateId, getSessionStorage } from './utils';\nimport type { SessionEvent, ReviConfig } from './types';\n\nexport class SessionManager {\n  private sessionId: string;\n  private startTime: number;\n  private events: SessionEvent[] = [];\n  private config: ReviConfig;\n  private storage: Storage | null;\n\n  constructor(config: ReviConfig) {\n    this.config = config;\n    this.storage = getSessionStorage();\n    this.sessionId = this.getOrCreateSessionId();\n    this.startTime = Date.now();\n    \n    this.setupEventListeners();\n    this.trackPageLoad();\n  }\n\n  private getOrCreateSessionId(): string {\n    const storageKey = 'revi_session_id';\n    \n    if (this.storage) {\n      const existingId = this.storage.getItem(storageKey);\n      if (existingId) return existingId;\n    }\n    \n    const newId = generateId();\n    if (this.storage) {\n      this.storage.setItem(storageKey, newId);\n    }\n    \n    return newId;\n  }\n\n  getSessionId(): string {\n    return this.sessionId;\n  }\n\n  private setupEventListeners(): void {\n    if (typeof window === 'undefined') return;\n\n    // DOM events\n    const eventTypes = ['click', 'input', 'change', 'submit', 'focus', 'blur'];\n    eventTypes.forEach(eventType => {\n      document.addEventListener(eventType, (event) => {\n        this.captureEvent(eventType, this.serializeDOMEvent(event));\n      }, { capture: true, passive: true });\n    });\n\n    // Navigation events\n    window.addEventListener('popstate', () => {\n      this.captureEvent('navigation', {\n        type: 'popstate',\n        url: window.location.href,\n        timestamp: Date.now()\n      });\n    });\n\n    // Page visibility\n    document.addEventListener('visibilitychange', () => {\n      this.captureEvent('visibility', {\n        hidden: document.hidden,\n        timestamp: Date.now()\n      });\n    });\n\n    // Scroll events (throttled)\n    let scrollTimeout: NodeJS.Timeout;\n    window.addEventListener('scroll', () => {\n      clearTimeout(scrollTimeout);\n      scrollTimeout = setTimeout(() => {\n        this.captureEvent('scroll', {\n          x: window.scrollX,\n          y: window.scrollY,\n          timestamp: Date.now()\n        });\n      }, 100);\n    }, { passive: true });\n\n    // Resize events (throttled)\n    let resizeTimeout: NodeJS.Timeout;\n    window.addEventListener('resize', () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = setTimeout(() => {\n        this.captureEvent('resize', {\n          width: window.innerWidth,\n          height: window.innerHeight,\n          timestamp: Date.now()\n        });\n      }, 100);\n    }, { passive: true });\n\n    // Before unload\n    window.addEventListener('beforeunload', () => {\n      this.captureEvent('beforeunload', {\n        timestamp: Date.now(),\n        duration: Date.now() - this.startTime\n      });\n      this.flush();\n    });\n  }\n\n  private serializeDOMEvent(event: Event): Record<string, any> {\n    const target = event.target as HTMLElement;\n    if (!target) return {};\n\n    const data: Record<string, any> = {\n      type: event.type,\n      timestamp: Date.now(),\n      target: {\n        tagName: target.tagName,\n        id: target.id,\n        className: target.className,\n        textContent: this.shouldMaskText(target) ? '[Masked]' : target.textContent?.slice(0, 100)\n      }\n    };\n\n    // Add specific event data\n    if (event.type === 'click') {\n      const mouseEvent = event as MouseEvent;\n      data.coordinates = {\n        x: mouseEvent.clientX,\n        y: mouseEvent.clientY\n      };\n    }\n\n    if (event.type === 'input' || event.type === 'change') {\n      const inputEvent = event.target as HTMLInputElement;\n      if (inputEvent && inputEvent.value !== undefined) {\n        data.value = this.shouldMaskInput(inputEvent) ? '[Masked]' : inputEvent.value;\n      }\n    }\n\n    return data;\n  }\n\n  private shouldMaskInput(element: HTMLInputElement): boolean {\n    if (!this.config.privacy?.maskInputs) return false;\n    \n    const sensitiveTypes = ['password', 'email', 'tel', 'credit-card-number'];\n    const sensitiveNames = ['password', 'email', 'phone', 'credit', 'card', 'ssn'];\n    \n    if (sensitiveTypes.includes(element.type)) return true;\n    \n    const name = element.name?.toLowerCase() || '';\n    const id = element.id?.toLowerCase() || '';\n    \n    return sensitiveNames.some(sensitive => \n      name.includes(sensitive) || id.includes(sensitive)\n    );\n  }\n\n  private shouldMaskText(element: HTMLElement): boolean {\n    if (!this.config.replay?.maskAllText) return false;\n    \n    // Check for specific selectors that should be masked\n    if (this.config.replay?.maskSelector) {\n      try {\n        return element.matches(this.config.replay.maskSelector);\n      } catch {\n        return false;\n      }\n    }\n    \n    return false;\n  }\n\n  private trackPageLoad(): void {\n    if (typeof window === 'undefined') return;\n\n    const captureLoadEvent = () => {\n      this.captureEvent('page_load', {\n        url: window.location.href,\n        title: document.title,\n        referrer: document.referrer,\n        timestamp: Date.now(),\n        loadTime: performance.now()\n      });\n    };\n\n    if (document.readyState === 'complete') {\n      captureLoadEvent();\n    } else {\n      window.addEventListener('load', captureLoadEvent);\n    }\n  }\n\n  captureEvent(type: string, data: Record<string, any>): void {\n    // Apply sampling\n    if (this.config.sessionSampleRate && Math.random() > this.config.sessionSampleRate) {\n      return;\n    }\n\n    const event: SessionEvent = {\n      sessionId: this.sessionId,\n      timestamp: Date.now(),\n      type,\n      data\n    };\n\n    // Apply beforeSendSession filter\n    const filteredEvent = this.config.beforeSendSession?.(event) || event;\n    if (!filteredEvent) return;\n\n    this.events.push(filteredEvent);\n\n    // Auto-flush when buffer is full\n    if (this.events.length >= 100) {\n      this.flush();\n    }\n  }\n\n  getEvents(): SessionEvent[] {\n    return [...this.events];\n  }\n\n  clearEvents(): void {\n    this.events = [];\n  }\n\n  flush(): SessionEvent[] {\n    const events = this.getEvents();\n    this.clearEvents();\n    return events;\n  }\n\n  endSession(): void {\n    this.captureEvent('session_end', {\n      timestamp: Date.now(),\n      duration: Date.now() - this.startTime\n    });\n    \n    if (this.storage) {\n      this.storage.removeItem('revi_session_id');\n    }\n  }\n}\n","import { generateId } from './utils';\nimport type { NetworkEvent, ReviConfig } from './types';\n\nexport class NetworkMonitor {\n  private config: ReviConfig;\n  private events: NetworkEvent[] = [];\n  private originalFetch: typeof fetch;\n  private originalXHROpen: typeof XMLHttpRequest.prototype.open;\n  private originalXHRSend: typeof XMLHttpRequest.prototype.send;\n\n  constructor(config: ReviConfig) {\n    this.config = config;\n    this.originalFetch = window.fetch;\n    this.originalXHROpen = XMLHttpRequest.prototype.open;\n    this.originalXHRSend = XMLHttpRequest.prototype.send;\n    \n    this.setupInterceptors();\n  }\n\n  private setupInterceptors(): void {\n    if (typeof window === 'undefined') return;\n\n    this.interceptFetch();\n    this.interceptXHR();\n  }\n\n  private interceptFetch(): void {\n    window.fetch = async (...args: Parameters<typeof fetch>): Promise<Response> => {\n      const startTime = Date.now();\n      const url = typeof args[0] === 'string' ? args[0] : args[0].url;\n      const method = (args[1]?.method || 'GET').toUpperCase();\n      \n      let requestSize = 0;\n      let requestBody: any;\n      \n      if (args[1]?.body) {\n        requestBody = this.serializeRequestBody(args[1].body);\n        requestSize = this.calculateBodySize(args[1].body);\n      }\n\n      try {\n        const response = await this.originalFetch.apply(window, args);\n        const endTime = Date.now();\n        \n        let responseBody: any;\n        let responseSize = 0;\n        \n        if (this.shouldCaptureResponseBody(url)) {\n          const clonedResponse = response.clone();\n          try {\n            responseBody = await this.extractResponseBody(clonedResponse);\n            responseSize = this.calculateResponseSize(responseBody);\n          } catch {\n            // Failed to extract response body\n          }\n        }\n\n        this.captureNetworkEvent({\n          method,\n          url,\n          statusCode: response.status,\n          responseTime: endTime - startTime,\n          requestSize,\n          responseSize,\n          requestHeaders: this.extractHeaders(args[1]?.headers),\n          responseHeaders: this.extractResponseHeaders(response.headers),\n          requestBody,\n          responseBody,\n          timestamp: startTime\n        });\n\n        return response;\n      } catch (error) {\n        const endTime = Date.now();\n        \n        this.captureNetworkEvent({\n          method,\n          url,\n          statusCode: 0, // Network error\n          responseTime: endTime - startTime,\n          requestSize,\n          responseSize: 0,\n          requestHeaders: this.extractHeaders(args[1]?.headers),\n          requestBody,\n          timestamp: startTime,\n          error: error instanceof Error ? error.message : String(error)\n        });\n\n        throw error;\n      }\n    };\n  }\n\n  private interceptXHR(): void {\n    const self = this;\n\n    XMLHttpRequest.prototype.open = function(method: string, url: string, ...args: any[]) {\n      (this as any)._reviData = {\n        method: method.toUpperCase(),\n        url,\n        startTime: Date.now()\n      };\n      \n      return self.originalXHROpen.call(this, method, url, ...args);\n    };\n\n    XMLHttpRequest.prototype.send = function(body?: any) {\n      const reviData = (this as any)._reviData;\n      if (!reviData) {\n        return self.originalXHRSend.call(this, body);\n      }\n\n      reviData.requestBody = self.serializeRequestBody(body);\n      reviData.requestSize = self.calculateBodySize(body);\n\n      this.addEventListener('loadend', () => {\n        const endTime = Date.now();\n        \n        let responseBody: any;\n        try {\n          if (this.responseType === '' || this.responseType === 'text') {\n            responseBody = this.responseText;\n          } else if (this.responseType === 'json') {\n            responseBody = this.response;\n          }\n        } catch {\n          // Failed to extract response\n        }\n\n        self.captureNetworkEvent({\n          method: reviData.method,\n          url: reviData.url,\n          statusCode: this.status,\n          responseTime: endTime - reviData.startTime,\n          requestSize: reviData.requestSize,\n          responseSize: self.calculateResponseSize(responseBody),\n          requestBody: reviData.requestBody,\n          responseBody: self.shouldCaptureResponseBody(reviData.url) ? responseBody : undefined,\n          timestamp: reviData.startTime\n        });\n      });\n\n      return self.originalXHRSend.call(this, body);\n    };\n  }\n\n  private serializeRequestBody(body: any): any {\n    if (!body) return undefined;\n    \n    if (typeof body === 'string') return body;\n    if (body instanceof FormData) {\n      const formObject: Record<string, any> = {};\n      body.forEach((value, key) => {\n        formObject[key] = value instanceof File ? `[File: ${value.name}]` : value;\n      });\n      return formObject;\n    }\n    if (body instanceof URLSearchParams) {\n      return Object.fromEntries(body);\n    }\n    \n    try {\n      return JSON.parse(JSON.stringify(body));\n    } catch {\n      return '[Unserializable]';\n    }\n  }\n\n  private async extractResponseBody(response: Response): Promise<any> {\n    const contentType = response.headers.get('content-type') || '';\n    \n    if (contentType.includes('application/json')) {\n      return await response.json();\n    } else if (contentType.includes('text/')) {\n      return await response.text();\n    }\n    \n    return '[Binary Data]';\n  }\n\n  private extractHeaders(headers?: HeadersInit): Record<string, string> {\n    if (!headers) return {};\n    \n    if (headers instanceof Headers) {\n      const headerObj: Record<string, string> = {};\n      headers.forEach((value, key) => {\n        headerObj[key] = value;\n      });\n      return headerObj;\n    }\n    \n    if (Array.isArray(headers)) {\n      const headerObj: Record<string, string> = {};\n      headers.forEach(([key, value]) => {\n        headerObj[key] = value;\n      });\n      return headerObj;\n    }\n    \n    return headers as Record<string, string>;\n  }\n\n  private extractResponseHeaders(headers: Headers): Record<string, string> {\n    const headerObj: Record<string, string> = {};\n    headers.forEach((value, key) => {\n      headerObj[key] = value;\n    });\n    return headerObj;\n  }\n\n  private calculateBodySize(body: any): number {\n    if (!body) return 0;\n    \n    if (typeof body === 'string') return body.length;\n    if (body instanceof ArrayBuffer) return body.byteLength;\n    if (body instanceof Blob) return body.size;\n    \n    try {\n      return JSON.stringify(body).length;\n    } catch {\n      return 0;\n    }\n  }\n\n  private calculateResponseSize(response: any): number {\n    if (!response) return 0;\n    \n    try {\n      return JSON.stringify(response).length;\n    } catch {\n      return 0;\n    }\n  }\n\n  private shouldCaptureResponseBody(url: string): boolean {\n    // Only capture response bodies for specific URLs to avoid memory issues\n    const allowedPatterns = [\n      /\\/api\\//,\n      /\\/graphql/,\n    ];\n    \n    return allowedPatterns.some(pattern => pattern.test(url));\n  }\n\n  private captureNetworkEvent(data: Partial<NetworkEvent> & { method: string; url: string; timestamp: number }): void {\n    const event: NetworkEvent = {\n      sessionId: '', // Will be set by Monitor class\n      timestamp: data.timestamp,\n      method: data.method,\n      url: data.url,\n      statusCode: data.statusCode,\n      responseTime: data.responseTime,\n      requestSize: data.requestSize,\n      responseSize: data.responseSize,\n      requestHeaders: data.requestHeaders,\n      responseHeaders: data.responseHeaders,\n      requestBody: data.requestBody,\n      responseBody: data.responseBody\n    };\n\n    this.events.push(event);\n\n    // Auto-flush when buffer is full\n    if (this.events.length >= 50) {\n      this.flush();\n    }\n  }\n\n  getEvents(): NetworkEvent[] {\n    return [...this.events];\n  }\n\n  clearEvents(): void {\n    this.events = [];\n  }\n\n  flush(): NetworkEvent[] {\n    const events = this.getEvents();\n    this.clearEvents();\n    return events;\n  }\n\n  destroy(): void {\n    // Restore original implementations\n    if (this.originalFetch) {\n      window.fetch = this.originalFetch;\n    }\n    \n    XMLHttpRequest.prototype.open = this.originalXHROpen;\n    XMLHttpRequest.prototype.send = this.originalXHRSend;\n  }\n}\n","import type { PerformanceEntry, WebVitals, ReviConfig } from './types';\n\nexport class PerformanceMonitor {\n  private config: ReviConfig;\n  private webVitals: WebVitals = {};\n  private performanceEntries: PerformanceEntry[] = [];\n\n  constructor(config: ReviConfig) {\n    this.config = config;\n    \n    if (this.config.performance?.captureWebVitals) {\n      this.setupWebVitals();\n    }\n    \n    if (this.config.performance?.captureResourceTiming) {\n      this.setupResourceTiming();\n    }\n    \n    if (this.config.performance?.captureNavigationTiming) {\n      this.setupNavigationTiming();\n    }\n  }\n\n  private setupWebVitals(): void {\n    if (typeof window === 'undefined' || !('PerformanceObserver' in window)) return;\n\n    // Largest Contentful Paint (LCP)\n    try {\n      const lcpObserver = new PerformanceObserver((list) => {\n        const entries = list.getEntries();\n        const lastEntry = entries[entries.length - 1];\n        this.webVitals.lcp = lastEntry.startTime;\n      });\n      lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\n    } catch (e) {\n      // LCP not supported\n    }\n\n    // First Input Delay (FID)\n    try {\n      const fidObserver = new PerformanceObserver((list) => {\n        const entries = list.getEntries() as any[];\n        entries.forEach((entry) => {\n          this.webVitals.fid = entry.processingStart - entry.startTime;\n        });\n      });\n      fidObserver.observe({ entryTypes: ['first-input'] });\n    } catch (e) {\n      // FID not supported\n    }\n\n    // Cumulative Layout Shift (CLS)\n    try {\n      let clsValue = 0;\n      const clsObserver = new PerformanceObserver((list) => {\n        const entries = list.getEntries() as any[];\n        entries.forEach((entry) => {\n          if (!entry.hadRecentInput) {\n            clsValue += entry.value;\n            this.webVitals.cls = clsValue;\n          }\n        });\n      });\n      clsObserver.observe({ entryTypes: ['layout-shift'] });\n    } catch (e) {\n      // CLS not supported\n    }\n\n    // First Contentful Paint (FCP)\n    try {\n      const fcpObserver = new PerformanceObserver((list) => {\n        const entries = list.getEntries();\n        entries.forEach((entry) => {\n          if (entry.name === 'first-contentful-paint') {\n            this.webVitals.fcp = entry.startTime;\n          }\n        });\n      });\n      fcpObserver.observe({ entryTypes: ['paint'] });\n    } catch (e) {\n      // FCP not supported\n    }\n\n    // Time to First Byte (TTFB)\n    this.calculateTTFB();\n  }\n\n  private calculateTTFB(): void {\n    if (typeof window === 'undefined' || !window.performance) return;\n\n    try {\n      const navigationTiming = performance.getEntriesByType('navigation')[0] as any;\n      if (navigationTiming) {\n        this.webVitals.ttfb = navigationTiming.responseStart - navigationTiming.requestStart;\n      }\n    } catch (e) {\n      // TTFB calculation failed\n    }\n  }\n\n  private setupResourceTiming(): void {\n    if (typeof window === 'undefined' || !window.performance) return;\n\n    try {\n      const resourceObserver = new PerformanceObserver((list) => {\n        const entries = list.getEntries();\n        entries.forEach((entry) => {\n          this.performanceEntries.push({\n            name: entry.name,\n            entryType: entry.entryType,\n            startTime: entry.startTime,\n            duration: entry.duration,\n            transferSize: (entry as any).transferSize,\n            encodedBodySize: (entry as any).encodedBodySize,\n            decodedBodySize: (entry as any).decodedBodySize\n          });\n        });\n      });\n      \n      resourceObserver.observe({ entryTypes: ['resource'] });\n    } catch (e) {\n      // Resource timing not supported\n    }\n  }\n\n  private setupNavigationTiming(): void {\n    if (typeof window === 'undefined' || !window.performance) return;\n\n    window.addEventListener('load', () => {\n      try {\n        const navigationTiming = performance.getEntriesByType('navigation')[0] as any;\n        if (navigationTiming) {\n          this.performanceEntries.push({\n            name: 'navigation',\n            entryType: 'navigation',\n            startTime: navigationTiming.startTime,\n            duration: navigationTiming.duration,\n            domContentLoadedEventEnd: navigationTiming.domContentLoadedEventEnd,\n            domContentLoadedEventStart: navigationTiming.domContentLoadedEventStart,\n            loadEventEnd: navigationTiming.loadEventEnd,\n            loadEventStart: navigationTiming.loadEventStart,\n            domComplete: navigationTiming.domComplete,\n            domInteractive: navigationTiming.domInteractive\n          });\n        }\n      } catch (e) {\n        // Navigation timing failed\n      }\n    });\n  }\n\n  getWebVitals(): WebVitals {\n    return { ...this.webVitals };\n  }\n\n  getPerformanceEntries(): PerformanceEntry[] {\n    return [...this.performanceEntries];\n  }\n\n  clearPerformanceEntries(): void {\n    this.performanceEntries = [];\n  }\n\n  // Custom performance marks\n  mark(name: string): void {\n    if (typeof window !== 'undefined' && window.performance && window.performance.mark) {\n      try {\n        performance.mark(name);\n      } catch (e) {\n        // Mark failed\n      }\n    }\n  }\n\n  measure(name: string, startMark?: string, endMark?: string): number | null {\n    if (typeof window === 'undefined' || !window.performance || !window.performance.measure) {\n      return null;\n    }\n\n    try {\n      performance.measure(name, startMark, endMark);\n      const measure = performance.getEntriesByName(name, 'measure')[0];\n      return measure ? measure.duration : null;\n    } catch (e) {\n      return null;\n    }\n  }\n}\n","import { getLocalStorage } from './utils';\nimport type { ErrorEvent, SessionEvent, NetworkEvent, ReviConfig } from './types';\n\ninterface QueuedData {\n  errors: ErrorEvent[];\n  sessionEvents: SessionEvent[];\n  networkEvents: NetworkEvent[];\n}\n\nexport class DataManager {\n  private config: ReviConfig;\n  private storage: Storage | null;\n  private uploadQueue: QueuedData = {\n    errors: [],\n    sessionEvents: [],\n    networkEvents: []\n  };\n  private uploadTimer: NodeJS.Timeout | null = null;\n  private isUploading = false;\n\n  constructor(config: ReviConfig) {\n    this.config = config;\n    this.storage = getLocalStorage();\n    \n    this.loadQueueFromStorage();\n    this.startUploadTimer();\n    this.setupBeforeUnloadHandler();\n  }\n\n  private loadQueueFromStorage(): void {\n    if (!this.storage) return;\n\n    try {\n      const storedData = this.storage.getItem('revi_upload_queue');\n      if (storedData) {\n        this.uploadQueue = JSON.parse(storedData);\n      }\n    } catch (e) {\n      // Failed to load from storage\n    }\n  }\n\n  private saveQueueToStorage(): void {\n    if (!this.storage) return;\n\n    try {\n      this.storage.setItem('revi_upload_queue', JSON.stringify(this.uploadQueue));\n    } catch (e) {\n      // Failed to save to storage, probably quota exceeded\n      this.clearQueue();\n    }\n  }\n\n  private startUploadTimer(): void {\n    const interval = 5000; // Upload every 5 seconds\n    \n    this.uploadTimer = setInterval(() => {\n      if (!this.isUploading && this.hasQueuedData()) {\n        this.uploadData();\n      }\n    }, interval);\n  }\n\n  private setupBeforeUnloadHandler(): void {\n    if (typeof window === 'undefined') return;\n\n    window.addEventListener('beforeunload', () => {\n      if (this.hasQueuedData()) {\n        this.uploadDataSync();\n      }\n    });\n  }\n\n  queueError(error: ErrorEvent): void {\n    this.uploadQueue.errors.push(error);\n    this.saveQueueToStorage();\n  }\n\n  queueSessionEvents(events: SessionEvent[]): void {\n    this.uploadQueue.sessionEvents.push(...events);\n    this.saveQueueToStorage();\n  }\n\n  queueNetworkEvents(events: NetworkEvent[]): void {\n    this.uploadQueue.networkEvents.push(...events);\n    this.saveQueueToStorage();\n  }\n\n  private hasQueuedData(): boolean {\n    return this.uploadQueue.errors.length > 0 ||\n           this.uploadQueue.sessionEvents.length > 0 ||\n           this.uploadQueue.networkEvents.length > 0;\n  }\n\n  private async uploadData(): Promise<void> {\n    if (this.isUploading || !this.hasQueuedData()) return;\n\n    this.isUploading = true;\n    const apiUrl = this.config.apiUrl || 'https://api.revi.dev';\n\n    try {\n      // Upload errors\n      if (this.uploadQueue.errors.length > 0) {\n        await this.uploadErrors(apiUrl, this.uploadQueue.errors);\n        this.uploadQueue.errors = [];\n      }\n\n      // Upload session events\n      if (this.uploadQueue.sessionEvents.length > 0) {\n        await this.uploadSessionEvents(apiUrl, this.uploadQueue.sessionEvents);\n        this.uploadQueue.sessionEvents = [];\n      }\n\n      // Upload network events\n      if (this.uploadQueue.networkEvents.length > 0) {\n        await this.uploadNetworkEvents(apiUrl, this.uploadQueue.networkEvents);\n        this.uploadQueue.networkEvents = [];\n      }\n\n      this.saveQueueToStorage();\n    } catch (error) {\n      if (this.config.debug) {\n        console.error('Revi: Failed to upload data', error);\n      }\n      // Keep data in queue for retry\n    } finally {\n      this.isUploading = false;\n    }\n  }\n\n  private uploadDataSync(): void {\n    if (!this.hasQueuedData()) return;\n\n    const apiUrl = this.config.apiUrl || 'https://api.revi.dev';\n\n    // Use sendBeacon for synchronous upload on page unload\n    if (navigator.sendBeacon) {\n      if (this.uploadQueue.errors.length > 0) {\n        const payload = JSON.stringify({ errors: this.uploadQueue.errors });\n        navigator.sendBeacon(`${apiUrl}/api/capture/error`, payload);\n      }\n\n      if (this.uploadQueue.sessionEvents.length > 0) {\n        const payload = JSON.stringify({ \n          session_id: this.uploadQueue.sessionEvents[0]?.sessionId,\n          events: this.uploadQueue.sessionEvents.map(e => ({\n            event_type: e.type,\n            data: e.data,\n            timestamp: new Date(e.timestamp)\n          }))\n        });\n        navigator.sendBeacon(`${apiUrl}/api/capture/session-event`, payload);\n      }\n\n      if (this.uploadQueue.networkEvents.length > 0) {\n        const payload = JSON.stringify({ events: this.uploadQueue.networkEvents });\n        navigator.sendBeacon(`${apiUrl}/api/capture/network-event`, payload);\n      }\n    }\n  }\n\n  private async uploadErrors(apiUrl: string, errors: ErrorEvent[]): Promise<void> {\n    const response = await fetch(`${apiUrl}/api/capture/error`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-API-Key': this.config.apiKey\n      },\n      body: JSON.stringify({\n        errors: errors.map(error => ({\n          message: error.message,\n          stack_trace: error.stack,\n          url: error.url,\n          user_agent: error.userAgent,\n          session_id: error.sessionId,\n          metadata: {\n            id: error.id,\n            userId: error.userId,\n            environment: error.environment,\n            release: error.release,\n            tags: error.tags,\n            extra: error.extra,\n            breadcrumbs: error.breadcrumbs,\n            level: error.level,\n            lineno: error.lineno,\n            colno: error.colno,\n            filename: error.filename\n          }\n        }))\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`Upload failed: ${response.status}`);\n    }\n  }\n\n  private async uploadSessionEvents(apiUrl: string, events: SessionEvent[]): Promise<void> {\n    if (events.length === 0) return;\n\n    const sessionId = events[0].sessionId;\n    const response = await fetch(`${apiUrl}/api/capture/session-event`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-API-Key': this.config.apiKey\n      },\n      body: JSON.stringify({\n        session_id: sessionId,\n        events: events.map(event => ({\n          event_type: event.type,\n          data: event.data,\n          timestamp: new Date(event.timestamp)\n        }))\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`Upload failed: ${response.status}`);\n    }\n  }\n\n  private async uploadNetworkEvents(apiUrl: string, events: NetworkEvent[]): Promise<void> {\n    const promises = events.map(event => \n      fetch(`${this.config.apiUrl}/api/capture/network-event`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-API-Key': this.config.apiKey\n        },\n        body: JSON.stringify({\n          session_id: event.sessionId,\n          events: [{\n            method: event.method,\n            url: event.url,\n            status_code: event.statusCode,\n            response_time: event.responseTime,\n            timestamp: new Date(event.timestamp),\n            request_data: {\n              headers: event.requestHeaders,\n              body: event.requestBody,\n              size: event.requestSize\n            },\n            response_data: {\n              headers: event.responseHeaders,\n              body: event.responseBody,\n              size: event.responseSize\n            }\n          }]\n        })\n      })\n    );\n\n    const responses = await Promise.allSettled(promises);\n    const failures = responses.filter(r => r.status === 'rejected');\n    \n    if (failures.length > 0) {\n      throw new Error(`${failures.length} network event uploads failed`);\n    }\n  }\n\n  clearQueue(): void {\n    this.uploadQueue = {\n      errors: [],\n      sessionEvents: [],\n      networkEvents: []\n    };\n    \n    if (this.storage) {\n      this.storage.removeItem('revi_upload_queue');\n    }\n  }\n\n  destroy(): void {\n    if (this.uploadTimer) {\n      clearInterval(this.uploadTimer);\n      this.uploadTimer = null;\n    }\n    \n    // Final upload attempt\n    if (this.hasQueuedData()) {\n      this.uploadDataSync();\n    }\n  }\n}\n","import { ErrorHandler } from './error-handler';\nimport { SessionManager } from './session';\nimport { NetworkMonitor } from './network-monitor';\nimport { PerformanceMonitor } from './performance-monitor';\nimport { DataManager } from './data-manager';\nimport { isBot } from './utils';\nimport type { ReviConfig, ErrorEvent, UserContext } from './types';\n\nexport class Monitor {\n  private config: ReviConfig;\n  private errorHandler: ErrorHandler;\n  private sessionManager: SessionManager;\n  private networkMonitor: NetworkMonitor;\n  private performanceMonitor: PerformanceMonitor;\n  private dataManager: DataManager;\n  private isInitialized = false;\n\n  constructor(config: ReviConfig) {\n    this.config = {\n      apiUrl: 'http://localhost:4000',\n      environment: 'production',\n      debug: false,\n      sampleRate: 1.0,\n      sessionSampleRate: 1.0,\n      maxBreadcrumbs: 50,\n      privacy: {\n        maskInputs: true,\n        maskPasswords: true,\n        maskCreditCards: true\n      },\n      performance: {\n        captureWebVitals: true,\n        captureResourceTiming: false,\n        captureNavigationTiming: true\n      },\n      replay: {\n        enabled: true,\n        maskAllInputs: false,\n        maskAllText: false\n      },\n      ...config\n    };\n\n    if (!this.config.apiKey) {\n      throw new Error('Revi: API key is required');\n    }\n\n    if (isBot()) {\n      if (this.config.debug) {\n        console.log('Revi: Bot detected, skipping initialization');\n      }\n      return;\n    }\n\n    this.init();\n  }\n\n  private init(): void {\n    if (this.isInitialized) return;\n\n    try {\n      this.errorHandler = new ErrorHandler(this.config);\n      this.sessionManager = new SessionManager(this.config);\n      this.networkMonitor = new NetworkMonitor(this.config);\n      this.performanceMonitor = new PerformanceMonitor(this.config);\n      this.dataManager = new DataManager(this.config);\n\n      this.setupPeriodicFlush();\n      this.isInitialized = true;\n\n      if (this.config.debug) {\n        console.log('Revi: Initialized successfully');\n      }\n    } catch (error) {\n      if (this.config.debug) {\n        console.error('Revi: Initialization failed', error);\n      }\n    }\n  }\n\n  private setupPeriodicFlush(): void {\n    // Flush data every 10 seconds\n    setInterval(() => {\n      this.flush();\n    }, 10000);\n  }\n\n  // Public API methods\n  captureException(error: Error, options: {\n    level?: 'error' | 'warning' | 'info' | 'debug';\n    tags?: Record<string, string>;\n    extra?: Record<string, any>;\n  } = {}): string {\n    if (!this.isInitialized) return '';\n\n    const errorId = this.errorHandler.captureException(error, options);\n    if (errorId) {\n      // Create error event and queue for upload\n      const errorEvent: ErrorEvent = {\n        id: errorId,\n        timestamp: Date.now(),\n        message: error.message,\n        stack: error.stack,\n        url: window.location.href,\n        userId: this.config.userId,\n        sessionId: this.sessionManager.getSessionId(),\n        userAgent: navigator.userAgent,\n        environment: this.config.environment,\n        release: this.config.release,\n        tags: options.tags,\n        extra: options.extra,\n        breadcrumbs: this.errorHandler.getBreadcrumbs(),\n        level: options.level || 'error'\n      };\n\n      this.dataManager.queueError(errorEvent);\n    }\n\n    return errorId;\n  }\n\n  captureMessage(message: string, options: {\n    level?: 'error' | 'warning' | 'info' | 'debug';\n    tags?: Record<string, string>;\n    extra?: Record<string, any>;\n  } = {}): string {\n    if (!this.isInitialized) return '';\n\n    const errorId = this.errorHandler.captureMessage(message, options);\n    if (errorId) {\n      const errorEvent: ErrorEvent = {\n        id: errorId,\n        timestamp: Date.now(),\n        message,\n        url: window.location.href,\n        userId: this.config.userId,\n        sessionId: this.sessionManager.getSessionId(),\n        userAgent: navigator.userAgent,\n        environment: this.config.environment,\n        release: this.config.release,\n        tags: options.tags,\n        extra: options.extra,\n        breadcrumbs: this.errorHandler.getBreadcrumbs(),\n        level: options.level || 'info'\n      };\n\n      this.dataManager.queueError(errorEvent);\n    }\n\n    return errorId;\n  }\n\n  addBreadcrumb(breadcrumb: {\n    message: string;\n    category?: string;\n    level?: 'error' | 'warning' | 'info' | 'debug';\n    data?: Record<string, any>;\n  }): void {\n    if (!this.isInitialized) return;\n\n    this.errorHandler.addBreadcrumb({\n      timestamp: Date.now(),\n      message: breadcrumb.message,\n      category: breadcrumb.category || 'manual',\n      level: breadcrumb.level || 'info',\n      data: breadcrumb.data\n    });\n  }\n\n  setUserContext(user: UserContext): void {\n    if (!this.isInitialized) return;\n\n    this.config.userId = user.id;\n    this.errorHandler.setUserContext(user);\n  }\n\n  setTags(tags: Record<string, string>): void {\n    if (!this.isInitialized) return;\n    this.errorHandler.setTags(tags);\n  }\n\n  setExtra(extra: Record<string, any>): void {\n    if (!this.isInitialized) return;\n    this.errorHandler.setExtra(extra);\n  }\n\n  // Session management\n  getSessionId(): string {\n    if (!this.isInitialized) return '';\n    return this.sessionManager.getSessionId();\n  }\n\n  endSession(): void {\n    if (!this.isInitialized) return;\n    \n    this.flush();\n    this.sessionManager.endSession();\n  }\n\n  // Performance monitoring\n  mark(name: string): void {\n    if (!this.isInitialized) return;\n    this.performanceMonitor.mark(name);\n  }\n\n  measure(name: string, startMark?: string, endMark?: string): number | null {\n    if (!this.isInitialized) return null;\n    return this.performanceMonitor.measure(name, startMark, endMark);\n  }\n\n  getWebVitals() {\n    if (!this.isInitialized) return {};\n    return this.performanceMonitor.getWebVitals();\n  }\n\n  // Data management\n  flush(): void {\n    if (!this.isInitialized) return;\n\n    // Get all queued events\n    const sessionEvents = this.sessionManager.flush();\n    const networkEvents = this.networkMonitor.flush();\n\n    // Add session ID to network events\n    networkEvents.forEach(event => {\n      event.sessionId = this.sessionManager.getSessionId();\n    });\n\n    // Queue for upload\n    if (sessionEvents.length > 0) {\n      this.dataManager.queueSessionEvents(sessionEvents);\n    }\n    \n    if (networkEvents.length > 0) {\n      this.dataManager.queueNetworkEvents(networkEvents);\n    }\n  }\n\n  // Cleanup\n  destroy(): void {\n    if (!this.isInitialized) return;\n\n    this.flush();\n    \n    if (this.networkMonitor) {\n      this.networkMonitor.destroy();\n    }\n    \n    if (this.dataManager) {\n      this.dataManager.destroy();\n    }\n\n    this.isInitialized = false;\n  }\n}\n","export { Monitor } from './monitor';\nexport type { \n  ReviConfig, \n  ErrorEvent, \n  SessionEvent, \n  NetworkEvent, \n  Breadcrumb, \n  UserContext,\n  WebVitals,\n  PerformanceEntry \n} from './types';\n\n// Default export for convenience\nexport { Monitor as default } from './monitor';\n\n// Global initialization helper\ndeclare global {\n  interface Window {\n    Revi?: any;\n  }\n}\n\n// Auto-initialize if global config is present\nif (typeof window !== 'undefined' && window.Revi) {\n  const config = window.Revi;\n  if (config.apiKey) {\n    const { Monitor } = require('./monitor');\n    window.Revi = new Monitor(config);\n  }\n}\n"],"names":["generateId","replace","c","r","Math","random","toString","formatStackTrace","error","stack","split","map","line","trim","filter","length","join","ErrorHandler","constructor","config","this","breadcrumbs","userContext","setupGlobalHandlers","window","addEventListener","event","captureError","message","filename","lineno","colno","reason","Error","JSON","stringify","originalConsoleError","console","args","addBreadcrumb","timestamp","Date","now","category","level","apply","originalConsoleWarn","warn","errorData","sampleRate","errorId","errorEvent","id","undefined","url","location","href","userId","sessionId","userAgent","navigator","environment","release","tags","extra","_b","beforeSend","call","_a","captureException","options","captureMessage","breadcrumb","push","maxBreadcrumbs","splice","setUserContext","user","setTags","setExtra","getBreadcrumbs","clearBreadcrumbs","SessionManager","events","storage","sessionStorage","setItem","removeItem","getSessionStorage","getOrCreateSessionId","startTime","setupEventListeners","trackPageLoad","storageKey","existingId","getItem","newId","getSessionId","scrollTimeout","resizeTimeout","forEach","eventType","document","captureEvent","serializeDOMEvent","capture","passive","type","hidden","clearTimeout","setTimeout","x","scrollX","y","scrollY","width","innerWidth","height","innerHeight","duration","flush","target","data","tagName","className","textContent","shouldMaskText","slice","mouseEvent","coordinates","clientX","clientY","inputEvent","value","shouldMaskInput","element","privacy","maskInputs","includes","name","toLowerCase","_c","some","sensitive","replay","maskAllText","maskSelector","matches","captureLoadEvent","title","referrer","loadTime","performance","readyState","sessionSampleRate","filteredEvent","beforeSendSession","getEvents","clearEvents","endSession","NetworkMonitor","originalFetch","fetch","originalXHROpen","XMLHttpRequest","prototype","open","originalXHRSend","send","setupInterceptors","interceptFetch","interceptXHR","async","method","toUpperCase","requestBody","requestSize","body","serializeRequestBody","calculateBodySize","response","endTime","responseBody","responseSize","shouldCaptureResponseBody","clonedResponse","clone","extractResponseBody","calculateResponseSize","_e","captureNetworkEvent","statusCode","status","responseTime","requestHeaders","extractHeaders","headers","responseHeaders","extractResponseHeaders","_d","String","self","_reviData","reviData","responseType","responseText","FormData","formObject","key","File","URLSearchParams","Object","fromEntries","parse","contentType","get","json","text","Headers","headerObj","Array","isArray","ArrayBuffer","byteLength","Blob","size","pattern","test","destroy","PerformanceMonitor","webVitals","performanceEntries","captureWebVitals","setupWebVitals","captureResourceTiming","setupResourceTiming","captureNavigationTiming","setupNavigationTiming","PerformanceObserver","list","entries","getEntries","lastEntry","lcp","observe","entryTypes","e","entry","fid","processingStart","clsValue","hadRecentInput","cls","fcp","calculateTTFB","navigationTiming","getEntriesByType","ttfb","responseStart","requestStart","entryType","transferSize","encodedBodySize","decodedBodySize","domContentLoadedEventEnd","domContentLoadedEventStart","loadEventEnd","loadEventStart","domComplete","domInteractive","getWebVitals","getPerformanceEntries","clearPerformanceEntries","mark","measure","startMark","endMark","getEntriesByName","DataManager","uploadQueue","errors","sessionEvents","networkEvents","uploadTimer","isUploading","localStorage","getLocalStorage","loadQueueFromStorage","startUploadTimer","setupBeforeUnloadHandler","storedData","saveQueueToStorage","clearQueue","setInterval","hasQueuedData","uploadData","uploadDataSync","queueError","queueSessionEvents","queueNetworkEvents","apiUrl","uploadErrors","uploadSessionEvents","uploadNetworkEvents","debug","sendBeacon","payload","session_id","event_type","apiKey","stack_trace","user_agent","metadata","ok","promises","status_code","response_time","request_data","response_data","failures","Promise","allSettled","clearInterval","Monitor","isInitialized","maskPasswords","maskCreditCards","enabled","maskAllInputs","log","init","errorHandler","sessionManager","networkMonitor","performanceMonitor","dataManager","setupPeriodicFlush","Revi","require"],"mappings":"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"}
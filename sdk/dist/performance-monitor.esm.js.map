{"version":3,"file":"performance-monitor.esm.js","sources":["../src/performance-monitor.ts"],"sourcesContent":["import type { PerformanceEntry, WebVitals, ReviConfig } from './types';\n\nexport class PerformanceMonitor {\n  private config: ReviConfig;\n  private webVitals: WebVitals = {};\n  private performanceEntries: PerformanceEntry[] = [];\n\n  constructor(config: ReviConfig) {\n    this.config = config;\n    \n    if (this.config.performance?.captureWebVitals) {\n      this.setupWebVitals();\n    }\n    \n    if (this.config.performance?.captureResourceTiming) {\n      this.setupResourceTiming();\n    }\n    \n    if (this.config.performance?.captureNavigationTiming) {\n      this.setupNavigationTiming();\n    }\n  }\n\n  private setupWebVitals(): void {\n    if (typeof window === 'undefined' || !('PerformanceObserver' in window)) return;\n\n    // Largest Contentful Paint (LCP)\n    try {\n      const lcpObserver = new PerformanceObserver((list) => {\n        const entries = list.getEntries();\n        const lastEntry = entries[entries.length - 1];\n        this.webVitals.lcp = lastEntry.startTime;\n      });\n      lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\n    } catch (e) {\n      // LCP not supported\n    }\n\n    // First Input Delay (FID)\n    try {\n      const fidObserver = new PerformanceObserver((list) => {\n        const entries = list.getEntries() as any[];\n        entries.forEach((entry) => {\n          this.webVitals.fid = entry.processingStart - entry.startTime;\n        });\n      });\n      fidObserver.observe({ entryTypes: ['first-input'] });\n    } catch (e) {\n      // FID not supported\n    }\n\n    // Cumulative Layout Shift (CLS)\n    try {\n      let clsValue = 0;\n      const clsObserver = new PerformanceObserver((list) => {\n        const entries = list.getEntries() as any[];\n        entries.forEach((entry) => {\n          if (!entry.hadRecentInput) {\n            clsValue += entry.value;\n            this.webVitals.cls = clsValue;\n          }\n        });\n      });\n      clsObserver.observe({ entryTypes: ['layout-shift'] });\n    } catch (e) {\n      // CLS not supported\n    }\n\n    // First Contentful Paint (FCP)\n    try {\n      const fcpObserver = new PerformanceObserver((list) => {\n        const entries = list.getEntries();\n        entries.forEach((entry) => {\n          if (entry.name === 'first-contentful-paint') {\n            this.webVitals.fcp = entry.startTime;\n          }\n        });\n      });\n      fcpObserver.observe({ entryTypes: ['paint'] });\n    } catch (e) {\n      // FCP not supported\n    }\n\n    // Time to First Byte (TTFB)\n    this.calculateTTFB();\n  }\n\n  private calculateTTFB(): void {\n    if (typeof window === 'undefined' || !window.performance) return;\n\n    try {\n      const navigationTiming = performance.getEntriesByType('navigation')[0] as any;\n      if (navigationTiming) {\n        this.webVitals.ttfb = navigationTiming.responseStart - navigationTiming.requestStart;\n      }\n    } catch (e) {\n      // TTFB calculation failed\n    }\n  }\n\n  private setupResourceTiming(): void {\n    if (typeof window === 'undefined' || !window.performance) return;\n\n    try {\n      const resourceObserver = new PerformanceObserver((list) => {\n        const entries = list.getEntries();\n        entries.forEach((entry) => {\n          this.performanceEntries.push({\n            name: entry.name,\n            entryType: entry.entryType,\n            startTime: entry.startTime,\n            duration: entry.duration,\n            transferSize: (entry as any).transferSize,\n            encodedBodySize: (entry as any).encodedBodySize,\n            decodedBodySize: (entry as any).decodedBodySize\n          });\n        });\n      });\n      \n      resourceObserver.observe({ entryTypes: ['resource'] });\n    } catch (e) {\n      // Resource timing not supported\n    }\n  }\n\n  private setupNavigationTiming(): void {\n    if (typeof window === 'undefined' || !window.performance) return;\n\n    window.addEventListener('load', () => {\n      try {\n        const navigationTiming = performance.getEntriesByType('navigation')[0] as any;\n        if (navigationTiming) {\n          this.performanceEntries.push({\n            name: 'navigation',\n            entryType: 'navigation',\n            startTime: navigationTiming.startTime,\n            duration: navigationTiming.duration,\n            domContentLoadedEventEnd: navigationTiming.domContentLoadedEventEnd,\n            domContentLoadedEventStart: navigationTiming.domContentLoadedEventStart,\n            loadEventEnd: navigationTiming.loadEventEnd,\n            loadEventStart: navigationTiming.loadEventStart,\n            domComplete: navigationTiming.domComplete,\n            domInteractive: navigationTiming.domInteractive\n          });\n        }\n      } catch (e) {\n        // Navigation timing failed\n      }\n    });\n  }\n\n  getWebVitals(): WebVitals {\n    return { ...this.webVitals };\n  }\n\n  getPerformanceEntries(): PerformanceEntry[] {\n    return [...this.performanceEntries];\n  }\n\n  clearPerformanceEntries(): void {\n    this.performanceEntries = [];\n  }\n\n  // Custom performance marks\n  mark(name: string): void {\n    if (typeof window !== 'undefined' && window.performance && typeof window.performance.mark === 'function') {\n      try {\n        performance.mark(name);\n      } catch (e) {\n        // Mark failed\n      }\n    }\n  }\n\n  measure(name: string, startMark?: string, endMark?: string): number | null {\n    if (typeof window === 'undefined' || !window.performance || !window.performance.measure) {\n      return null;\n    }\n\n    try {\n      performance.measure(name, startMark, endMark);\n      const measure = performance.getEntriesByName(name, 'measure')[0];\n      return measure ? measure.duration : null;\n    } catch (e) {\n      return null;\n    }\n  }\n}\n"],"names":["PerformanceMonitor","constructor","config","this","webVitals","performanceEntries","_a","performance","captureWebVitals","setupWebVitals","_b","captureResourceTiming","setupResourceTiming","_c","captureNavigationTiming","setupNavigationTiming","window","PerformanceObserver","list","entries","getEntries","lcp","length","startTime","observe","entryTypes","e","forEach","entry","fid","processingStart","clsValue","hadRecentInput","value","cls","name","fcp","calculateTTFB","navigationTiming","getEntriesByType","ttfb","responseStart","requestStart","push","entryType","duration","transferSize","encodedBodySize","decodedBodySize","addEventListener","domContentLoadedEventEnd","domContentLoadedEventStart","loadEventEnd","loadEventStart","domComplete","domInteractive","getWebVitals","getPerformanceEntries","clearPerformanceEntries","mark","measure","startMark","endMark","getEntriesByName"],"mappings":"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"}